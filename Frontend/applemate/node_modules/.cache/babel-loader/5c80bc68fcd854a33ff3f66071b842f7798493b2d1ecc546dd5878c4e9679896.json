{"ast":null,"code":"var _jsxFileName = \"E:\\\\Apple_Mate(project)\\\\Frontend\\\\applemate\\\\src\\\\AuthenticationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\n\n// Create the authentication context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Auth provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check auth status on component mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // Function to check if user is authenticated\n  const checkAuthStatus = async () => {\n    try {\n      // Check if token exists in localStorage\n      const token = localStorage.getItem('authToken');\n      const storedUserType = localStorage.getItem('userType');\n      if (token) {\n        // Optional: Verify token with backend\n        // const response = await fetch('/api/verify-token/', {\n        //   headers: {\n        //     'Authorization': `Token ${token}`\n        //   }\n        // });\n\n        // if (response.ok) {\n        //   const data = await response.json();\n        //   setUserType(data.user_type);\n        //   setIsAuthenticated(true);\n        // } else {\n        //   // Token invalid, clear storage\n        //   logout();\n        // }\n\n        // For now, just trust the token presence\n        setUserType(storedUserType);\n        setIsAuthenticated(true);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function\n  const login = (token, type) => {\n    localStorage.setItem('authToken', token);\n    localStorage.setItem('userType', type);\n    setUserType(type);\n    setIsAuthenticated(true);\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Optional: Call logout endpoint\n      // await fetch('/api/logout/', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json',\n      //     'Authorization': `Token ${localStorage.getItem('authToken')}`\n      //   }\n      // });\n\n      // Clear local storage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userType');\n\n      // Update state\n      setIsAuthenticated(false);\n      setUserType(null);\n      return true;\n    } catch (error) {\n      console.error('Logout failed:', error);\n      return false;\n    }\n  };\n\n  // Context value\n  const value = {\n    isAuthenticated,\n    userType,\n    loading,\n    login,\n    logout,\n    checkAuthStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"A2TioywDHutq1sQdtUrIrJfJaYU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","userType","setUserType","loading","setLoading","checkAuthStatus","token","localStorage","getItem","storedUserType","error","console","login","type","setItem","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Apple_Mate(project)/Frontend/applemate/src/AuthenticationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\n// Create the authentication context\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userType, setUserType] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check auth status on component mount\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  // Function to check if user is authenticated\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      // Check if token exists in localStorage\r\n      const token = localStorage.getItem('authToken');\r\n      const storedUserType = localStorage.getItem('userType');\r\n      \r\n      if (token) {\r\n        // Optional: Verify token with backend\r\n        // const response = await fetch('/api/verify-token/', {\r\n        //   headers: {\r\n        //     'Authorization': `Token ${token}`\r\n        //   }\r\n        // });\r\n        \r\n        // if (response.ok) {\r\n        //   const data = await response.json();\r\n        //   setUserType(data.user_type);\r\n        //   setIsAuthenticated(true);\r\n        // } else {\r\n        //   // Token invalid, clear storage\r\n        //   logout();\r\n        // }\r\n\r\n        // For now, just trust the token presence\r\n        setUserType(storedUserType);\r\n        setIsAuthenticated(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth check failed:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Login function\r\n  const login = (token, type) => {\r\n    localStorage.setItem('authToken', token);\r\n    localStorage.setItem('userType', type);\r\n    setUserType(type);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  // Logout function\r\n  const logout = async () => {\r\n    try {\r\n      // Optional: Call logout endpoint\r\n      // await fetch('/api/logout/', {\r\n      //   method: 'POST',\r\n      //   headers: {\r\n      //     'Content-Type': 'application/json',\r\n      //     'Authorization': `Token ${localStorage.getItem('authToken')}`\r\n      //   }\r\n      // });\r\n      \r\n      // Clear local storage\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('userType');\r\n      \r\n      // Update state\r\n      setIsAuthenticated(false);\r\n      setUserType(null);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    isAuthenticated,\r\n    userType,\r\n    loading,\r\n    login,\r\n    logout,\r\n    checkAuthStatus\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}