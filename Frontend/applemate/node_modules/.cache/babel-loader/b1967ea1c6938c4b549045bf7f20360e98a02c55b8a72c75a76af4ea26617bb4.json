{"ast":null,"code":"var _jsxFileName = \"E:\\\\Apple_Mate(project)\\\\Frontend\\\\applemate\\\\src\\\\AuthenticationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\n\n// Create the authentication context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Auth provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check auth status on component mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // Function to check if user is authenticated\n  const checkAuthStatus = async () => {\n    try {\n      // Check if token exists in localStorage\n      const token = localStorage.getItem('authToken');\n      const storedUserType = localStorage.getItem('userType');\n      const role = localStorage.getItem('role');\n      if (token) {\n        // Optional: Verify token with backend\n        // Since we don't have a specific endpoint for this,\n        // we'll just trust the local storage values for now\n\n        // For retail sellers, use their role\n        if (role === 'user') {\n          setUserType('retail_seller');\n        } else if (role === 'admin') {\n          setUserType('admin');\n        } else {\n          // Fallback to stored user type\n          setUserType(storedUserType);\n        }\n        setIsAuthenticated(true);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function\n  const login = (token, role, username) => {\n    localStorage.setItem('authToken', token);\n    localStorage.setItem('role', role);\n    localStorage.setItem('username', username);\n\n    // Set user type based on role\n    const userType = role === 'user' ? 'retail_seller' : role;\n    setUserType(userType);\n    localStorage.setItem('userType', userType);\n    setIsAuthenticated(true);\n  };\n\n  // Logout function - modified to not call API endpoint\n  const logout = () => {\n    try {\n      // Clear local storage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userType');\n      localStorage.removeItem('role');\n      localStorage.removeItem('username');\n\n      // Update state\n      setIsAuthenticated(false);\n      setUserType(null);\n      return true;\n    } catch (error) {\n      console.error('Logout failed:', error);\n      return false;\n    }\n  };\n\n  // Context value\n  const value = {\n    isAuthenticated,\n    userType,\n    loading,\n    login,\n    logout,\n    checkAuthStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"A2TioywDHutq1sQdtUrIrJfJaYU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","userType","setUserType","loading","setLoading","checkAuthStatus","token","localStorage","getItem","storedUserType","role","error","console","login","username","setItem","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Apple_Mate(project)/Frontend/applemate/src/AuthenticationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\n// Create the authentication context\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userType, setUserType] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check auth status on component mount\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  // Function to check if user is authenticated\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      // Check if token exists in localStorage\r\n      const token = localStorage.getItem('authToken');\r\n      const storedUserType = localStorage.getItem('userType');\r\n      const role = localStorage.getItem('role');\r\n      \r\n      if (token) {\r\n        // Optional: Verify token with backend\r\n        // Since we don't have a specific endpoint for this,\r\n        // we'll just trust the local storage values for now\r\n        \r\n        // For retail sellers, use their role\r\n        if (role === 'user') {\r\n          setUserType('retail_seller');\r\n        } else if (role === 'admin') {\r\n          setUserType('admin');\r\n        } else {\r\n          // Fallback to stored user type\r\n          setUserType(storedUserType);\r\n        }\r\n        \r\n        setIsAuthenticated(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth check failed:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Login function\r\n  const login = (token, role, username) => {\r\n    localStorage.setItem('authToken', token);\r\n    localStorage.setItem('role', role);\r\n    localStorage.setItem('username', username);\r\n    \r\n    // Set user type based on role\r\n    const userType = role === 'user' ? 'retail_seller' : role;\r\n    setUserType(userType);\r\n    localStorage.setItem('userType', userType);\r\n    \r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  // Logout function - modified to not call API endpoint\r\n  const logout = () => {\r\n    try {\r\n      // Clear local storage\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('userType');\r\n      localStorage.removeItem('role');\r\n      localStorage.removeItem('username');\r\n      \r\n      // Update state\r\n      setIsAuthenticated(false);\r\n      setUserType(null);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    isAuthenticated,\r\n    userType,\r\n    loading,\r\n    login,\r\n    logout,\r\n    checkAuthStatus\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}